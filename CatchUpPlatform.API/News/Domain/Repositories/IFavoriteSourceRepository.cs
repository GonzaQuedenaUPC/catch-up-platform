using CatchUpPlatform.API.News.Domain.Model.Aggregates;
using CatchUpPlatform.API.Shared.Domain.Repositories;

namespace CatchUpPlatform.API.News.Domain.Repositories;

/// <summary>
/// Repository for <see cref="FavoriteSource"/>. 
/// </summary>
public interface IFavoriteSourceRepository : IBaseRepository<FavoriteSource>
{
    /// <summary>
    /// Find all <see cref="FavoriteSource"/> by <paramref name="newsApiKey"/>. 
    /// </summary>
    /// <param name="newsApiKey">The News API Key generated by News provider</param>
    /// <returns>
    /// A collection of <see cref="FavoriteSource"/> that matches the <paramref name="newsApiKey"/>
    /// </returns>
    Task<IEnumerable<FavoriteSource>> FindByNewsApiKeyAsync(string newsApiKey);
    
    /// <summary>
    /// Find <see cref="FavoriteSource"/> by <paramref name="newsApiKey"/> and <paramref name="sourceId"/>. 
    /// </summary>
    /// <param name="newsApiKey">The News API Key generated by News provider</param>
    /// <param name="sourceId">The News API Source ID</param>
    /// <returns>
    /// A <see cref="FavoriteSource"/> that matches the <paramref name="newsApiKey"/> and <paramref name="sourceId"/> 
    /// </returns>
    Task<FavoriteSource?> FindByNewsApiKeyAndSourceIdAsync(string newsApiKey, string sourceId);
    
}